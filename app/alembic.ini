[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date
# within the migration file as well as the filename.
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# migration file section of the filename.
# revision_file_token_prefix =
# revision_file_token_suffix =

# set to 'true' to run the environment file as a
# standalone script, that is, without connecting
# to a database or performing any migrations.
# standalone_mode = false

# set to 'true' to use transaction per migration, rather
# than the default behavior of a single transaction for the
# entire migration run.
# transactional_ddl = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as imports
# sourceless = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = driver://user:pass@localhost/dbname


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# after new revision script(s) are written.
#   name = myhook
#   type = hook
#   description = some description
#   script_module = mymodule
#   script_func = myhook
#   transactional = true

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S